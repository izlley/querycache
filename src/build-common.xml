<?xml version="1.0"?>

<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->


<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:artifact="urn:maven-artifact-ant"
         name="querycachecommon" default="jar">

  <property name="querycache.root" location="${basedir}/.."/>

  <!-- load ant-contrib tasks to get the "if" task. -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${querycache.root}/../thirdparty/ant-contrib-0.6/lib/ant-contrib-0.6.jar"/>
    </classpath>
  </taskdef>
  
  <property environment="env"/>

  <property file="${querycache.root}/build.properties"/>
  <property name="sourceJavaVersion" value="${javac.version}" />
  <property name="targetJavaVersion" value="${javac.version}" />
  <property name="javaBootClasspath" value="${env.JAVA_HOME}/jre/lib/rt.jar" />

  <property name="querycache.conf.dir" value="${querycache.root}/conf"/>
  <property name="dist.dir" location="${querycache.root}"/>

  <property name="build.dir.querycache" location="${querycache.root}/build"/>
  <property name="build.dir" location="${build.dir.querycache}/${ant.project.name}"/>
  <property name="build.classes" location="${build.dir}/classes"/>
  <property name="build.encoding" value="ISO-8859-1"/>
  <property name="thirdparty.dir" value="${querycache.root}/../thirdparty"/>

  <!-- Thrift codegen properties -->
  <property name="common.dir" value="${basedir}/../common"/>
  <property name="thrift.home" value="${thirdparty.dir}/thrift-${thrift.version}"/>
  <property name="thrift.args" value="-I ${thrift.home} --gen java:hashcode"/>
  <property name="thrift.gen.dir" value="${basedir}/generated-sources"/>

  <!-- configuration needed for tests -->
  <property name="test.src.dir" value="${basedir}/src/test"/>
  <property name="test.resources.dir" value="${basedir}/src/test/resources"/>
  <property name="test.build.dir" value="${build.dir}/test"/>
  <property name="test.log.dir" value="${test.build.dir}/logs"/>
  <property name="test.build.src" value="${test.build.dir}/src"/>
  <property name="test.build.classes" value="${test.build.dir}/classes"/>
  <property name="test.build.resources" value="${test.build.dir}/resources"/>
  <property name="test.include" value="Test*"/>
  <property name="test.classpath.id" value="test.classpath"/>
  <property name="test.output" value="true"/>
  <property name="test.junit.output.format" value="xml"/>
  <property name="test.junit.output.usefile" value="true"/>
  <property name="test.silent" value="true"/>
  <property name="test.serialize.qplan" value="false"/>
  <property name="test.print.classpath" value="false"/>
  <property name="test.lang" value="en_US.UTF-8"/>

  <path id="classpath">
    <pathelement location="${build.dir.querycache}/server/classes"/>
    <pathelement location="${build.dir.querycache}/jdbc/classes"/>
    <fileset file="${thirdparty.dir}/thrift-${thrift.version}/lib/java/libthrift-${thrift.version}.jar"/>
    <fileset file="${thirdparty.dir}/thrift-${thrift.version}/lib/java/lib/commons-lang3-${commons-lang3.version}.jar"/>
    <fileset file="${thirdparty.dir}/log/*.jar"/>
    <fileset file="${thirdparty.dir}/guava-${guava.version}/guava-${guava.version}.jar"/>
    <fileset file="${thirdparty.dir}/jackson-${jackson.version}/jackson-${jackson.version}.jar"/>
    <fileset file="${thirdparty.dir}/cup-${cup.version}/cup-${cup.version}.jar"/>
    <fileset file="${thirdparty.dir}/jflex-${jflex.version}/JFlex.jar"/>
    <fileset file="${thirdparty.dir}/apache-sentry-${sentry.version}/lib/sentry-core-common-${sentry.version}.jar"/>
    <fileset file="${thirdparty.dir}/apache-sentry-${sentry.version}/lib/sentry-core-model-db-${sentry.version}.jar"/>
    <fileset file="${thirdparty.dir}/apache-sentry-${sentry.version}/lib/sentry-policy-common-${sentry.version}.jar"/>
    <fileset file="${thirdparty.dir}/apache-sentry-${sentry.version}/lib/sentry-policy-db-${sentry.version}.jar"/>
    <fileset file="${thirdparty.dir}/apache-sentry-${sentry.version}/lib/sentry-provider-common-${sentry.version}.jar"/>
    <fileset file="${thirdparty.dir}/apache-sentry-${sentry.version}/lib/sentry-provider-file-${sentry.version}.jar"/>
    <fileset file="${thirdparty.dir}/apache-sentry-${sentry.version}/lib/hadoop-common-${hadoop.version}.jar"/>

    <!--fileset file="${thirdparty.dir}/phoenix-${phoenix.version}/phoenix-${phoenix.version}-client.jar"/-->
    <!--fileset dir="${thirdparty.dir}" includes="**/*.jar"/-->
  </path>

  <target name="create-dirs">
    <echo message="Project: ${ant.project.name}"/>
    <mkdir dir="${build.dir.querycache}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${test.build.dir}"/>
    <mkdir dir="${test.build.src}"/>
    <mkdir dir="${test.build.classes}"/>
    <mkdir dir="${test.build.resources}"/>
    <!--<copy todir="${test.build.resources}" failonerror="false">
      <fileset dir="${test.resources.dir}"/>
    </copy>-->
  </target>

  <target name="init" depends="create-dirs">
    <echo message="Project: ${ant.project.name}"/>
  </target>

  <target name="setup">
    <echo message="Project: ${ant.project.name}"/>
  </target>

  <target name="compile" depends="init, setup">
    <echo message="Project: ${ant.project.name}"/>
    <javac
     encoding="${build.encoding}"
     srcdir="${src.dir}"
     includes="**/*.java"
     destdir="${build.classes}"
     debug="${javac.debug}"
     deprecation="${javac.deprecation}"
     includeantruntime="false">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="classpath"/>
    </javac>
    <copy todir="${build.classes}" failonerror="false">
      <fileset dir="${src.dir}/conf"/>
    </copy>
  </target>

  <target name="jar" depends="compile">
    <echo message="Project: ${ant.project.name}" />
    <jar
      jarfile="${build.dir}/querycache-${ant.project.name}-${version}.jar"
      basedir="${build.classes}">
      <manifest>
        <!-- Not putting these in their own manifest section, since that inserts
        a new-line, which breaks the reading of the attributes. -->
        <attribute name="Implementation-Title" value="Querycache"/>
        <attribute name="Implementation-Version" value="${version}"/>
        <attribute name="Implementation-Vendor" value="Apache"/>
      </manifest>
      <metainf dir="${querycache.root}" includes="LICENSE,NOTICE"/>
    </jar>
  </target>

  <!-- target to compile tests -->
  <target name="compile-test" depends="compile">
    <echo message="Project: ${ant.project.name}"/>
    <echo message="JDK source: ${sourceJavaVersion}, target: ${targetJavaVersion}, bootclasspath: ${javaBootClasspath}"/>
    <javac
     encoding="${build.encoding}"
     srcdir="${test.src.dir}"
     destdir="${test.build.classes}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     source="${sourceJavaVersion}"
     target="${targetJavaVersion}"
     bootclasspath="${javaBootClasspath}"
     deprecation="${javac.deprecation}"
     includeantruntime="false">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="test.classpath"/>
    </javac>
    <javac
     encoding="${build.encoding}"
     srcdir="${test.build.src}"
     destdir="${test.build.classes}"
     debug="${javac.debug}"
     optimize="${javac.optimize}"
     source="${sourceJavaVersion}"
     target="${targetJavaVersion}"
     bootclasspath="${javaBootClasspath}"
     deprecation="${javac.deprecation}"
     includeantruntime="false">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="test.classpath"/>
    </javac>
  </target>

  <target name="test-jar" depends="compile-test">
    <echo message="Project: ${ant.project.name}"/>
  </target>

  <target name="test-conditions">
    <echo message="Project: ${ant.project.name}"/>
    <condition property="qfile" value="">
      <not>
        <isset property="qfile"/>
      </not>
    </condition>

    <condition property="qfile_regex" value="">
      <not>
        <isset property="qfile_regex"/>
      </not>
    </condition>

    <condition property="overwrite" value="false">
      <not>
        <isset property="overwrite"/>
      </not>
    </condition>

    <condition property="standalone" value="false">
      <not>
        <isset property="standalone"/>
      </not>
    </condition>

    <condition property="disableserver" value="false">
      <not>
        <isset property="disableserver"/>
      </not>
    </condition>
    
    <condition property="clustermode" value="">
      <not>
        <isset property="clustermode"/>
      </not>
    </condition>

    <condition property="run_disabled" value="false">
      <not>
        <isset property="run_disabled"/>
      </not>
    </condition>

  </target>


  <target name="gen-test">
    <echo message="Project: ${ant.project.name}"/>
  </target>

  <!-- target to run the tests -->
  <target name="test"
    depends="test-conditions,gen-test,compile-test,test-jar">
    <echo message="Project: ${ant.project.name}"/>
    <!-- Set jvm args to noop if unset -->
  </target>

  <target name="clean-test">
    <echo message="Project: ${ant.project.name}"/>
    <delete dir="${test.build.dir}"/>
    <delete dir="${build.dir.querycache}/test"/>
  </target>

  <target name="clean">
    <echo message="Project: ${ant.project.name}"/>
    <delete dir="${build.dir}"/>
    <delete dir="${thrift.gen.dir}"/>
  </target>

  <target name="check-thrift-home">
    <echo message="Project: ${ant.project.name}"/>
    <condition property="thrift.home.defined">
      <or>
        <not>
          <isset property="thrift.home"/>
        </not>
        <equals arg1="${thrift.home}" arg2="$${thrift.home}" trim="true"/>
      </or>
    </condition>
  </target>

  <target name="thriftif" depends="check-thrift-home">
    <echo message="Project: ${ant.project.name} debug: ${thrift.gen.dir}, ${common.dir}"/>
    <delete dir="${thrift.gen.dir}"/>
    <mkdir dir="${thrift.gen.dir}"/>
    <for param="thrift.file">
      <path>
        <fileset dir="${common.dir}" includes="thrift/*.thrift" />
      </path>
      <sequential>
        <echo message="Generating Thrift code for @{thrift.file}"/>
        <exec executable="${thrift.home}/bin/thrift"  failonerror="true" dir=".">
          <arg line="${thrift.args} -o ${thrift.gen.dir} @{thrift.file} " />
        </exec>
      </sequential>
    </for>
  </target>
</project>
